// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // ######################## zx & nx ###############################
    // ======================== comment ===============================
    // zx: 1 -> x is zero (set)
        // :: if zx has 1 = tempX is 0 because b is false.
    // nx: 1 -> transform x (not)
        // first, assignment not X value
        // :: if nx has 1 = call not(x) -> by Mux16
    // ======================== comment ===============================
    
    Mux16(a=x, b=false, sel=zx, out=tempX);  // here is zx
    Not16(in=tempX, out=notTX);
    Mux16(a=tempX, b=notTX, sel=nx, out=X);  // here is nx calling

    // ######################## zy & ny ###############################
    // ======================== comment ===============================
    // about y, same to X.
    // ======================== comment ===============================

    Mux16(a=y, b=false, sel=zy, out=tempY);
    Not16(in=tempY, out=notTY);
    Mux16(a=tempY, b=notTY, sel=ny, out=Y);
    // ========================== code ================================

    // ########################### f ##################################
    // ======================== comment ===============================
    // function: 1 -> Add, function: 0 -> And
        // :: Mux16 -> selector: 1 = run b, else run a.
        // :: function bit done.
    // ======================== comment ===============================

    Add16(a=X, b=Y, out=addXY);
    And16(a=X, b=Y, out=andXY);
    Mux16(a=andXY, b=addXY, sel=f, out=functionResult);
    // ========================== code ================================

    // ########################## output ###############################
    // ======================== comment ===============================
    // about no, same to function(f) -> output to "out[16]"
    // ng: multi-bit indexes are left end is negative
    // LSB, MSB: 16-bit out transform 1bit zr
        // by Or8way -> input 8bit, output 1bit
        // 16bit / 2 -> 8bit *2 = Calling "Or8Way" twice can convert to "1bit out"
        // first Or8way -> LSB
        // second Or8way -> MSB
    // ======================== comment ===============================

    Not16(in=functionResult, out=notFunctionResult);
    Mux16(a=functionResult, b=notFunctionResult, sel=no, out=out, out[0..7]=right, out[8..15]=left, out[15]=ng);


    // ======================== comment ===============================
    // Or -> 16-bit result to 1-bit result
        // Not -> linkedOut has 0 -> zr is 1
        // linkedOut has 1 -> zr is 0
    // ======================== comment ===============================
    Or8Way(in=right, out=right8BitOut);  // 0
    Or8Way(in=left, out=left8BitOut);  // 
    Or(a=right8BitOut, b=left8BitOut, out=linkedOut);  // 1
    
    Not(in=linkedOut, out=zr);  // 0
    // ========================== code ================================
}